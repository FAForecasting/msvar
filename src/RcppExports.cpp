// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hamiltonFilter
Rcpp::List hamiltonFilter(int bigt, int m, int p, int h, Eigen::Map<Eigen::MatrixXd> e, Eigen::Map<Eigen::MatrixXd> sig2, Eigen::Map<Eigen::MatrixXd> Qhat);
RcppExport SEXP _msvar_hamiltonFilter(SEXP bigtSEXP, SEXP mSEXP, SEXP pSEXP, SEXP hSEXP, SEXP eSEXP, SEXP sig2SEXP, SEXP QhatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type bigt(bigtSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type e(eSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Qhat(QhatSEXP);
    rcpp_result_gen = Rcpp::wrap(hamiltonFilter(bigt, m, p, h, e, sig2, Qhat));
    return rcpp_result_gen;
END_RCPP
}
// predict_cpp
Eigen::MatrixXd predict_cpp(int samples, Eigen::Map<Eigen::MatrixXd> Q, Eigen::Map<Eigen::MatrixXd> Bk, Eigen::Map<Eigen::MatrixXd> sigmaU, Eigen::Map<Eigen::VectorXd> fp_last, int h, int m, int p, Eigen::Map<Eigen::VectorXd> Z_init);
RcppExport SEXP _msvar_predict_cpp(SEXP samplesSEXP, SEXP QSEXP, SEXP BkSEXP, SEXP sigmaUSEXP, SEXP fp_lastSEXP, SEXP hSEXP, SEXP mSEXP, SEXP pSEXP, SEXP Z_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Q(QSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Bk(BkSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type sigmaU(sigmaUSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type fp_last(fp_lastSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Z_init(Z_initSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_cpp(samples, Q, Bk, sigmaU, fp_last, h, m, p, Z_init));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_msvar_hamiltonFilter", (DL_FUNC) &_msvar_hamiltonFilter, 7},
    {"_msvar_predict_cpp", (DL_FUNC) &_msvar_predict_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_msvar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
